# Animated 3D Fractals - Interactive Real-Time Fractal Explorer

A powerful real-time 3D fractal rendering engine with interactive navigation, animation system, and multiple output formats. Create stunning animated journeys through complex mathematical structures like Mandelbulbs, Menger sponges, and more.

## Features

### Real-Time 3D Fractal Rendering
- Multiple fractal types: Mandelbulb, Menger sponge, Mandelbox, and more
- Hardware-accelerated OpenGL rendering with GLSL shaders
- Real-time parameter adjustment and live preview

### Interactive Navigation
- Full 6DOF camera movement through fractal space
- Mouse-look camera control (like first-person games)
- Real-time parameter tweaking with immediate visual feedback
- Zoom, rotate, and explore complex mathematical landscapes

### Animation System
- Keyframe-based camera animation with smooth interpolation
- Spline-based camera paths for fluid motion
- Export animations as image sequences for video creation
- Loop support for seamless animation cycles

### Advanced Rendering Features
- Multiple stereoscopic 3D modes (cross-eyed, over-under, interlaced, side-by-side)
- Specialized output formats (cubic, dome, spherical)
- Ambient occlusion and glow effects
- High-quality anti-aliasing and post-processing

## Quick Start

### Prerequisites
- Modern C++ compiler with C++17 support
- CMake 3.16 or later
- OpenGL 3.0+ compatible graphics card
- Git (for submodule dependencies)

### Build Instructions

#### Modern CMake Build (Recommended)
```bash
# Clone the repository
git clone <repository-url>
cd Animated-3D-Fractals

# Initialize submodules (SDL2 2.32.8 and Google Test)
git submodule update --init --recursive

# Create build directory and configure
mkdir build && cd build
cmake ..

# Build the project
cmake --build .

# Run unit tests to verify installation
./unit_tests

# Test SDL2 integration
./sdl2-test
```

#### Legacy Makefile Build
For legacy systems, simple makefiles are provided for Linux, Win32, and OSX.
```bash
# Copy appropriate makefile
cp Makefile.linux Makefile  # or Makefile.osx, Makefile.win32

# Build with make
make
```

### Running the Application
```bash
# Basic usage - explore mandelbulb fractal interactively
./build/boxplorer2 cfgs/mandelbulb/default.cfg

# Try different fractal types
./build/boxplorer2 cfgs/menger.cfg.data/default.cfg
./build/boxplorer2 cfgs/colonoscopy/default.cfg
```

## Project Structure

```
├── source/           # C++ source files (.cpp)
├── include/          # Header files (.h)
├── tests/            # Unit tests (Google Test framework)
├── External/         # External dependencies as git submodules
│   ├── SDL2/         # SDL2 2.32.8 - Graphics and input handling
│   └── googletest/   # Google Test framework
├── cfgs/             # Fractal configurations and shaders
├── AntTweakBar/      # GUI library for parameter adjustment
├── GL/               # OpenGL extensions
└── build/            # Build output directory
```

## Dependencies

### Included as Git Submodules
- **SDL2 2.32.8**: Cross-platform graphics, input, and window management
- **Google Test**: Unit testing framework

### System Dependencies
- **OpenGL 3.0+**: Hardware-accelerated 3D graphics
- **X11/Wayland**: Linux display server support
- **Standard C++ libraries**: Math, threading, filesystem

## Testing

The project includes comprehensive unit tests using Google Test framework:
- `test_interpolate.cpp`: Tests for mathematical interpolation functions (16 tests)
- `test_camera.cpp`: Tests for camera and keyframe functionality (11 tests)

```bash
# Run all tests
./build/unit_tests

# Or use CMake/CTest
cd build && make test
```

All 27 tests validate core functionality including quaternion operations, camera movement, interpolation, and matrix transformations.

## Interactive Controls

### Mouse Controls
| Input | Action |
|-------|--------|
| **Mouse movement** | Look around (camera rotation) when grabbed |
| **Left click** | Release mouse grab / UI interaction |
| **Right click** | Grab mouse for camera control |
| **Mouse wheel up** | Zoom in (decrease eye distance) |
| **Mouse wheel down** | Zoom out (increase eye distance) |

### Keyboard Controls

#### Camera Navigation
| Key | Action |
|-----|--------|
| **W, A, S, D** | Move forward/left/backward/right |
| **Q, E** | Roll camera left/right |
| **Z, C** | Adjust movement speed |
| **Arrow keys** | Fine camera adjustments |

#### Parameter Control
| Key | Action |
|-----|--------|
| **0-9** | Select fractal parameter to adjust |
| **F** | Field of view (FOV) |
| **G** | Glow effects |
| **I** | Iterations (detail level) |
| **L** | Camera controls |
| **O** | Ambient occlusion |
| **R** | Ray marching parameters |
| **T** | Time control |
| **V** | 3D effects |

#### Animation & Keyframes
| Key | Action |
|-----|--------|
| **Tab** | Jump to next keyframe |
| **Shift+Tab** / **Backspace** | Jump to previous keyframe |
| **Ctrl+Tab** | Start playing animation from current keyframe |
| **Space** | Add current camera position as new keyframe |
| **Delete** | Delete last keyframe |
| **Ctrl+Space** | Update current keyframe with camera position |
| **Ctrl+Delete** | Delete currently selected keyframe |
| **Home** | Spline keyframes and start animation |
| **End** | Jump to last keyframe |
| **Page Up/Down** | Navigate splined animation |

#### Keyframe Editing
| Key | Action |
|-----|--------|
| **Numpad 4/6** | Move keyframe left/right |
| **Numpad 2/8** | Move keyframe up/down |
| **Numpad 1/9** | Move keyframe closer/further |
| **Numpad 7/3** | Adjust speed at keyframe |

### Special Keys
| Key | Action |
|-----|--------|
| **Escape** | Release mouse grab / return to UI mode |

## Command Line Options

### Basic Usage
```bash
./boxplorer2 <configuration.cfg>
```

### Rendering Options
```bash
# Render animation to image sequence
./boxplorer2 your.cfg --render

# Render with constant speed
./boxplorer2 your.cfg --render --speed

# Render with time-based frames
./boxplorer2 your.cfg --render --time

# Loop animation
./boxplorer2 your.cfg --loop
```

### Stereoscopic 3D Output
```bash
--xeyed       # Cross-eyed side-by-side (half horizontal resolution)
--overunder   # Over-under mode (half vertical resolution)  
--interlaced  # Interlaced mode (left odd, right even lines)
--sidebyside  # Side-by-side (compatible with 3D TVs)
--quadbuffer  # OpenGL quad buffer stereo
```

### Special Output Formats
```bash
--cubic       # Output 6 cube faces
--dome        # 180° dome view (looking up)
--spherical   # 360°x180° spherical view
```

## Available Fractal Types

The `cfgs/` directory contains various fractal configurations:
- **Mandelbulb** (`cfgs/mandelbulb/`) - 3D Mandelbrot set
- **Menger Sponge** (`cfgs/menger.cfg.data/`) - Classic fractal sponge
- **Mandelbox** (`cfgs/mbox-fp64/`) - Box-folding fractal
- **Colonoscopy** (`cfgs/colonoscopy/`) - Organic tunnel-like structures
- **And many more** - Explore the `cfgs/` directory for more options

## Creating Animations

1. **Explore**: Use mouse and keyboard to navigate to interesting viewpoints
2. **Set Keyframes**: Press `Space` to add current position as keyframe
3. **Preview**: Press `Home` to interpolate and preview the path
4. **Adjust**: Use `Tab` to navigate keyframes and fine-tune positions
5. **Render**: Use `--render` flag to export image sequence
6. **Convert**: Use external tools (ffmpeg) to create video from images

## Performance Tips

- Start with lower iteration counts for real-time exploration
- Use higher iterations only for final rendering
- Adjust resolution in config files for different quality/speed trade-offs
- Modern GPUs with OpenGL 3.0+ provide best performance

## Recent Fixes (2025-08-09)

### GLSL Shader Compilation Fixed ✅
- **Issue**: Duplicate variable declarations in `cfgs/mandelbulb/fragment.glsl` conflicted with `setup.inc`
- **Fix**: Removed conflicting `varying vec3 eye, dir;` and `uniform float xres, yres, time, speed;` declarations
- **Result**: All fractal shaders now compile successfully, enabling 3D graphics rendering

### Mouse Sensitivity Improved ✅
- **Issue**: High mouse sensitivity caused unstable navigation and window focus problems
- **Fix**: Reduced `mouse_rot_speed` from 1.0 to 0.1 and `keyb_rot_speed` from 5 to 1
- **Result**: Much smoother and more controllable fractal exploration

### Performance Verified ✅
- Application runs at 30+ FPS with real-time 3D fractal rendering
- Distance estimator calculations working correctly
- All shader uniforms properly linked and functional

## Troubleshooting

- Ensure graphics drivers support OpenGL 3.0+
- For WSL2: Use X11 forwarding or run with `DISPLAY` variable set
- If mouse controls are too sensitive, adjust `mouse_rot_speed` in config files
- For stable viewing in WSL2/X11, use keyboard controls primarily
- Use `./sdl2-test` to verify SDL2 integration is working

---

*Original boxplorer project by Marius, with modern improvements including:*
- *C++17 and modern CMake build system*
- *SDL2 2.32.8 integration* 
- *Comprehensive unit testing*
- *Enhanced documentation and project structure*
